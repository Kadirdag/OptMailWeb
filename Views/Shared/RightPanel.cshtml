@* Views/Shared/RightPanel.cshtml *@
<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<style>
    /* Genel kart stili */
    .card.shadow-sm {
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.06);
        border-radius: 0.75rem;
        background-color: #ffffff;
        padding: 1.2rem;
        transition: all 0.25s ease-in-out;
    }

        .card.shadow-sm:hover {
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);
        }

    /* Başlık */
    .card-title {
        font-weight: 600;
        color: #0d6efd;
        margin-bottom: 0.8rem;
        font-size: 1.2rem;
    }

    /* Form elemanları */
    .form-select, .form-control {
        border-radius: 0.45rem;
        border: 1px solid #d0d7e5;
        padding: 0.45rem 0.8rem;
        font-size: 0.875rem;
        transition: all 0.2s ease-in-out;
    }

        .form-select:hover, .form-control:hover {
            border-color: #0d6efd;
            box-shadow: 0 0 6px rgba(13, 110, 253, 0.15);
        }

    /* Kullanıcı tablosu */
    #filteredUsersBody tr {
        transition: background 0.2s;
        cursor: pointer;
    }

        #filteredUsersBody tr:hover {
            background-color: #e7f0ff;
        }

    #filteredUsersBody td {
        padding: 0.6rem 0.8rem;
        vertical-align: middle;
        font-size: 0.875rem;
    }

    /* Checkbox */
    .customcheckbox {
        position: relative;
        display: inline-block;
        cursor: pointer;
        user-select: none;
        padding-left: 26px;
    }

        .customcheckbox input[type=checkbox] {
            all: unset;
            position: absolute;
            left: 0;
            top: 0;
            width: 18px;
            height: 18px;
            cursor: pointer;
            opacity: 0;
            z-index: 2;
        }

        .customcheckbox .checkmark {
            position: absolute;
            left: 0;
            top: 0;
            height: 18px;
            width: 18px;
            background-color: #e9ecef;
            border: 1px solid #adb5bd;
            border-radius: 4px;
            transition: all 0.2s;
        }

        .customcheckbox input:checked ~ .checkmark {
            background-color: #0d6efd;
            border-color: #0d6efd;
        }

        .customcheckbox .checkmark:after {
            content: "";
            position: absolute;
            display: none;
        }

        .customcheckbox input:checked ~ .checkmark:after {
            display: block;
        }

        .customcheckbox .checkmark:after {
            left: 5px;
            top: 1px;
            width: 4px;
            height: 9px;
            border: solid white;
            border-width: 0 2px 2px 0;
            transform: rotate(45deg);
        }

    /* Tümünü seç ve arama kutusu */
    .top-controls {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 10px;
    }

        .top-controls input.form-control {
            flex: 1;
            border-radius: 0.45rem;
            border: 1px solid #d0d7e5;
            padding: 0.35rem 0.7rem;
            transition: all 0.2s;
        }

            .top-controls input.form-control:hover {
                border-color: #0d6efd;
                box-shadow: 0 0 6px rgba(13,110,253,0.12);
            }

    /* Table başlığı */
    table.table thead th {
        background-color: #f8f9fa;
        position: sticky;
        top: 0;
        z-index: 2;
    }

    /* Kaydet butonu */
    #btnSave {
        border-radius: 0.5rem;
        padding: 0.45rem 1rem;
        font-weight: 500;
        background-color: #0d6efd;
        color: #fff;
        border: none;
        transition: all 0.25s;
    }

        #btnSave:hover {
            box-shadow: 0 5px 15px rgba(13, 110, 253, 0.25);
            transform: translateY(-1px);
        }
</style>


<div class="col-md">
    <div class="card shadow-sm">
        <h5 class="card-title">Alıcı Filtreleme</h5>

        <div class="mb-2">
            <label for="bolum" class="form-label">Bölüm</label>
            <select id="bolum" class="form-select"></select>
        </div>

        <div class="mb-2">
            <label for="aracikurum" class="form-label">Aracı Kurum</label>
            <select id="aracikurum" class="form-select"></select>
        </div>

        <div class="mb-2">
            <label for="birim" class="form-label">Birim</label>
            <select id="birim" class="form-select"></select>
        </div>

        <div class="card p-3 mt-3 shadow-sm" style="background-color:#f8f9fa;">
            <h5 class="card-title mb-3">Filtrelenmiş Kullanıcılar</h5>

            <div class="top-controls">
                <div style="display:flex; align-items:center; gap:5px;">
                    <label class="customcheckbox">
                        <input type="checkbox" id="selectAllUsers">
                        <span class="checkmark"></span>
                    </label>
                    <span style="font-size:0.9rem;">Tümünü Seç</span>
                </div>
                <input type="text" id="searchMail" class="form-control" placeholder="Mail ile ara...">
            </div>

            <div style="max-height:300px; overflow-y:auto; border:1px solid #dee2e6; border-radius:0.5rem;">
                <table class="table table-hover mb-0">
                    <thead>
                        <tr>
                            <th style="width:40px;"></th>
                            <th>Ad Soyad</th>
                            <th>Mail</th>
                            <th>Telefon</th>
                            <th>Sil</th>
                        </tr>
                    </thead>
                    <tbody id="filteredUsersBody">
                        <!-- JS ile doldurulacak -->
                    </tbody>
                </table>
            </div>
        </div>

        <div class="d-flex mt-3">
            <button id="btnSave" class="btn btn-success flex-grow-1">Kaydet</button>
        </div>
    </div>
</div>


<script>

    // Kullanıcıları filtreleme
    function loadFilteredUsers() {
        const bolumId = $("#bolum").val() || 0;
        const araciKurumId = $("#aracikurum").val() || 0;
        const kurumId = $("#kurum").val() || 0;
        const birimId = $("#birim").val() || 0;

        $.getJSON(`/Mail/GetFilteredUsers?bolumId=${bolumId}&araciKurumId=${araciKurumId}&kurumId=${birimId}`, function (data) {
            const tbody = $("#filteredUsersBody");
            tbody.empty();

            if (Array.isArray(data)) {
                data.forEach(user => {
                    const isChecked = selectedEmails.has(user.email) ? "checked" : "";
                    const tr = $(`
                        <tr data-userid="${user.id}">
                            <td>
                                <label class="customcheckbox">
                                    <input type="checkbox" class="user-checkbox" data-mail="${user.email}" ${isChecked}>
                                    <span class="checkmark"></span>
                                </label>
                            </td>
                            <td>${user.name}</td>
                            <td class="mail-cell">${user.email}</td>
                            <td>${user.telefon}</td>
                            <td>
                                <button class="btn btn-sm btn-danger btn-delete-user">Sil</button>
                            </td>
                        </tr>
                    `);
                    tbody.append(tr);
                });
            }

            const total = $("#filteredUsersBody .user-checkbox").length;
            const checked = $("#filteredUsersBody .user-checkbox:checked").length;
            $("#selectAllUsers").prop("checked", total > 0 && total === checked);
        });
    }

    // Bölümleri yükle
    $.getJSON("/Mail/GetBolumler", function (data) {
        const bolumSelect = $("#bolum");
        bolumSelect.empty().append('<option value="">Seçiniz</option>');
        if (Array.isArray(data)) {
            data.forEach(item => {
                bolumSelect.append(`<option value="${item.id}">${item.name}</option>`);
            });
        }
    });

    // Bölüm değişince Aracı Kurumları doldur
    $("#bolum").change(function () {
        const bolumId = $(this).val() || 0;
        $("#aracikurum, #kurum, #birim").empty().append('<option value="">Seçiniz</option>');
        loadFilteredUsers();

        if (bolumId != 0) {
            $.getJSON(`/Mail/GetAraciKurumlar?bolumId=${bolumId}`, function (data) {
                const araciSelect = $("#aracikurum");
                araciSelect.empty().append('<option value="">Seçiniz</option>');
                if (Array.isArray(data)) {
                    data.forEach(item => {
                        araciSelect.append(`<option value="${item.id}">${item.name}</option>`);
                    });
                }
            });
        }
    });

    // Aracı Kurum değişince Kurum & Birimleri doldur
    $("#aracikurum").change(function () {
        const bolumId = $("#bolum").val() || 0;
        const araciKurumId = $(this).val() || 0;

        $("#kurum, #birim").empty().append('<option value="">Seçiniz</option>');


            $.getJSON(`/Mail/GetBirimler?bolumId=${bolumId}&araciKurumId=${araciKurumId}`, function (data) {
                const birimSelect = $("#birim");
                birimSelect.empty().append('<option value="">Seçiniz</option>');
                if (Array.isArray(data)) {
                    data.forEach(item => {
                        birimSelect.append(`<option value="${item.id}">${item.name}</option>`);
                    });
                }
            });

        loadFilteredUsers();
    });

    // Kurum veya Birim değişince kullanıcıları filtrele
    $("#kurum, #birim").change(loadFilteredUsers);

    // ------------------ Checkbox Eventleri ------------------
    // Tümünü Seç
    $(document).on("change", "#selectAllUsers", function () {
        $("#filteredUsersBody .user-checkbox").prop("checked", $(this).is(":checked"));
    });

    // Alt kutular değişince üst kutuyu güncelle
    $(document).on("change", "#filteredUsersBody .user-checkbox", function () {
        const total = $("#filteredUsersBody .user-checkbox").length;
        const checked = $("#filteredUsersBody .user-checkbox:checked").length;
        $("#selectAllUsers").prop("checked", total > 0 && total === checked);
    });

    // ------------------ Mail Arama ------------------
    $("#searchMail").on("input", function () {
        const search = $(this).val().toLowerCase();
        $("#filteredUsersBody tr").each(function () {
            const mail = $(this).find(".mail-cell").text().toLowerCase();
            $(this).toggle(mail.includes(search));
        });
    });

    // ------------------ Mail Gönderme ------------------
    function sendSelectedUsersMail() {
        const selectedEmails = $(".user-checkbox:checked").map(function () {
            return $(this).data("mail");
        }).get();

        if (selectedEmails.length === 0) {
            alert("Lütfen en az bir kullanıcı seçiniz!");
            return;
        }

        const mailData = window.parent.getMailData();
        if (!mailData.subject || !mailData.body) {
            alert("Mail başlığı veya içeriği boş olamaz!");
            return;
        }

        const payload = {
            Subject: mailData.subject,
            Body: mailData.body,
            To: selectedEmails
        };

        fetch("/Mail/SendMail", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload)
        })
            .then(res => res.json())
            .then(res => {
                if (res.success) {
                    alert("Mail başarıyla gönderildi!");
                } else {
                    alert("Mail gönderiminde hata: " + res.message);
                }
            })
            .catch(err => {
                console.error(err);
                alert("Mail gönderiminde hata oluştu!");
            });
    }


    let selectedEmails = new Set();

    // Alt kutu değişince güncelle
    $(document).on("change", "#filteredUsersBody .user-checkbox", function () {
        const email = $(this).data("mail");
        if ($(this).is(":checked")) {
            selectedEmails.add(email);
        } else {
            selectedEmails.delete(email);
        }

        const total = $("#filteredUsersBody .user-checkbox").length;
        const checked = $("#filteredUsersBody .user-checkbox:checked").length;
        $("#selectAllUsers").prop("checked", total > 0 && total === checked);
    });


    // Kaydet butonuna bağla
    $("#btnSave").on("click", sendSelectedUsersMail);

    // ------------------ İlk Yükleme ------------------
    $(document).ready(loadFilteredUsers);


    $(document).on("click", ".btn-delete-user", function () {
        const tr = $(this).closest("tr");
        const userId = tr.data("userid");

        if (confirm("Bu kullanıcıyı silmek istediğinize emin misiniz?")) {
            $.ajax({
                url: "/Mail/DeleteUser",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify({ UserId: userId }),
                success: function (res) {
                    if (res.success) {
                        tr.remove();
                        alert("Kullanıcı silindi.");
                    } else {
                        alert(res.message || "Kullanıcı silinemedi.");
                    }
                },
                error: function (xhr, status, error) {
                    alert("Sunucu hatası: " + error);
                }
            });
        }
    });




</script>
